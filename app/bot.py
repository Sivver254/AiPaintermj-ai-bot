from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import CommandStart, Command
from aiogram.utils.markdown import hbold
from .horde import HordeClient
from .config import load_settings
from .keyboards import main_kb, styles_kb
import base64, re
from io import BytesIO
from PIL import Image

router = Router()
settings = load_settings()
horde = HordeClient(api_key=settings.horde_key)

HELP = (
    "–≠—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–∞—Ä—Ç–∏–Ω–æ–∫ @AiPaintermj_bot üé®\n\n"
    "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
    "‚Ä¢ –ù–∞–∂–º–∏ ¬´üé® –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É¬ª –∏ –Ω–∞–ø–∏—à–∏ –ø—Ä–æ–º–ø—Ç\n"
    "‚Ä¢ –ò–ª–∏ –∫–æ–º–∞–Ω–¥—ã: /imagine <—Ç–µ–∫—Å—Ç>, /realism <—Ç–µ–∫—Å—Ç>, /anime <—Ç–µ–∫—Å—Ç>, /pixel <—Ç–µ–∫—Å—Ç>\n"
    "‚Ä¢ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): --w 768 --h 512 --steps 30 --cfg 7\n"
    "–ü–æ–¥—Å–∫–∞–∑–∫–∞: —á–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç."
)

STYLE_PROMPTS = {
    "realism": "highly detailed realistic photography, natural lighting, cinematic, 50mm lens",
    "anime":   "anime style, vibrant colors, clean lineart, studio quality, highly detailed",
    "pixel":   "pixel art, 16-bit retro game style, crisp pixels, limited color palette",
}

def parse_params(text: str):
    width = int(re.search(r"--w\s+(\d+)", text).group(1)) if re.search(r"--w\s+(\d+)", text) else 768
    height = int(re.search(r"--h\s+(\d+)", text).group(1)) if re.search(r"--h\s+(\d+)", text) else 768
    steps = int(re.search(r"--steps\s+(\d+)", text).group(1)) if re.search(r"--steps\s+(\d+)", text) else 28
    cfg = float(re.search(r"--cfg\s+([\d\.]+)", text).group(1)) if re.search(r"--cfg\s+([\d\.]+)", text) else 7.0
    clean = re.sub(r"--(w|h|steps|cfg)\s+\S+", "", text).strip()
    return clean, width, height, steps, cfg

async def _generate_and_send(m: Message, prompt: str, style_key: str | None):
    prefix = STYLE_PROMPTS.get(style_key or "", "")
    final_prompt = f"{prefix}. {prompt}".strip(". ")

    await m.answer("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è‚Ä¶ (–Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º –∫–ª–∞—Å—Ç–µ—Ä–µ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å ~–ø–æ–ª–º–∏–Ω—É—Ç—ã)", reply_markup=main_kb())
    try:
        req_id = await horde.generate(final_prompt)
        status = await horde.wait_for_result(req_id)
        gens = status.get("generations") or status.get("images") or []
        if not gens:
            await m.answer("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –∏–∑–º–µ–Ω–∏ –ø—Ä–æ–º–ø—Ç.", reply_markup=main_kb())
            return

        b64 = gens[0].get("img") if isinstance(gens[0], dict) else gens[0]
        img_bytes = base64.b64decode(b64)
        im = Image.open(BytesIO(img_bytes)).convert("RGB")
        out = BytesIO(); im.save(out, format="JPEG", quality=92); out.seek(0)

        cap_style = style_key or "–±–µ–∑ —Å—Ç–∏–ª—è"
        await m.answer_photo(out, caption=f"–°—Ç–∏–ª—å: {cap_style}\n–ó–∞–ø—Ä–æ—Å: {prompt}", reply_markup=main_kb())
    except Exception as e:
        await m.answer(f"–û—à–∏–±–∫–∞: {e}", reply_markup=main_kb())

@router.message(CommandStart())
async def start(m: Message):
    await m.answer(f"–ü—Ä–∏–≤–µ—Ç, {hbold(m.from_user.full_name)}!\n{HELP}", reply_markup=main_kb())

@router.message(Command("help"))
async def help_cmd(m: Message):
    await m.answer(HELP, reply_markup=main_kb())

@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def help_btn(m: Message):
    await m.answer(HELP, reply_markup=main_kb())

@router.message(F.text == "üß≠ –í—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å")
async def pick_style(m: Message):
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å:", reply_markup=styles_kb())

@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main(m: Message):
    await m.answer("–ì–æ—Ç–æ–≤–æ. –ù–∞–ø–∏—à–∏ –ø—Ä–æ–º–ø—Ç –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=main_kb())

@router.message(F.text == "üé® –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É")
async def create_btn(m: Message):
    await m.answer("–ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ (–ø—Ä–æ–º–ø—Ç). –ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–∫–æ—Ç –≤ –∫–æ—Å–º–æ—Å–µ –Ω–∞ —Ñ–æ–Ω–µ —Ç—É–º–∞–Ω–Ω–æ—Å—Ç–∏¬ª", reply_markup=main_kb())

@router.message(Command("imagine"))
async def imagine(m: Message):
    parts = m.text.split(maxsplit=1)
    if len(parts) < 2:
        await m.answer("–ü—Ä–∏–º–µ—Ä: /imagine –∫–æ—Ç –≤ –∫–æ—Å–º–æ—Å–µ --w 768 --h 512", reply_markup=main_kb())
        return
    text, w, h, steps, cfg = parse_params(parts[1])
    await _generate_and_send(m, text, style_key=None)

@router.message(Command("realism"))
async def realism(m: Message):
    parts = m.text.split(maxsplit=1)
    if len(parts) < 2:
        await m.answer("–ü—Ä–∏–º–µ—Ä: /realism –∑–∞–∫–∞—Ç –Ω–∞–¥ –æ–∫–µ–∞–Ω–æ–º", reply_markup=main_kb())
        return
    text, *_ = parse_params(parts[1])
    await _generate_and_send(m, text, style_key="realism")

@router.message(Command("anime"))
async def anime(m: Message):
    parts = m.text.split(maxsplit=1)
    if len(parts) < 2:
        await m.answer("–ü—Ä–∏–º–µ—Ä: /anime –≥–µ—Ä–æ–π —Å —Å–∏–Ω–µ–π –∞—É—Ä–æ–π", reply_markup=main_kb())
        return
    text, *_ = parse_params(parts[1])
    await _generate_and_send(m, text, style_key="anime")

@router.message(Command("pixel"))
async def pixel(m: Message):
    parts = m.text.split(maxsplit=1)
    if len(parts) < 2:
        await m.answer("–ü—Ä–∏–º–µ—Ä: /pixel —Ä—ã—Ü–∞—Ä—å –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ", reply_markup=main_kb())
        return
    text, *_ = parse_params(parts[1])
    await _generate_and_send(m, text, style_key="pixel")

@router.message(F.text & ~F.text.startswith("/"))
async def free_prompt(m: Message):
    await _generate_and_send(m, m.text.strip(), style_key="realism")
